# Create your models here.
""" understory/five_questions/models.py. """
from django.db import models
from django.shortcuts import render
from wagtail.admin.panels import FieldPanel, InlinePanel, MultiFieldPanel, FieldPanel
from wagtail import blocks
from wagtail.models import Page, Orderable
from wagtail.fields import RichTextField, StreamField
from wagtail.images.blocks import ImageChooserBlock
from wagtail.embeds.blocks import EmbedBlock
from wagtail.images.models import Image
from wagtail.images.edit_handlers import FieldPanel
from modelcluster.fields import ParentalKey
from modelcluster.contrib.taggit import ClusterTaggableManager
from taggit.models import TaggedItemBase
from wagtail.snippets.edit_handlers import FieldPanel
from wagtail.admin.panels import PageChooserPanel
from wagtail.search import index
# For creating anchors based on Header tags
# See https://stackoverflow.com/questions/49415788/fragment-id-linking-in-wagtails-rich-text-content
import re
from django import template
from django.utils.text import slugify
from wagtail.rich_text import RichText
from common.util.parse_search_fields import parse_search_fields
from common.util.clean_title_monkeypatch import clean_titler

# We'll be wrapping the original RichText.__html__(), so make
# sure we have a reference to it that we can call.
__original__html__ = RichText.__html__

# This matches an h1/.../h6, using a regexp that is only
# guaranteed to work because we know that the source of
# the HTML code we'll be working with generates nice
# and predictable HTML code (and note the non-greedy
# "one or more" for the heading content).
heading_re = r"<h([1-6])([^>]*)>(.+?)</h\1>"


def add_id_attribute(match):
    """
    This is a regexp replacement function that takes
    in the above regex match results, and then turns:
    <h1>some text</h1>
    Into:
        <h1><a id="some-text"></a><a href="#some-text">some text</a></h1>
        where the id attribute value is generated by running
        the heading text through Django's slugify() function.
    """
    n = match.group(1)
    attributes= match.group(2)
    text_content = match.group(3)
    id = slugify(text_content)
    return f'<h{n}{attributes}><a class="nav-adjust" id="{id}"></a><a href="#{id}">{text_content}</a></h{n}>'


def with_heading_ids(self):
    """
    We don't actually change how RichText.__html__ works, we just replace
    it with a function that does "whatever it already did", plus a
    substitution pass that adds fragment ids and their associated link
    elements to any headings that might be in the rich text content.
    """
    html = __original__html__(self)
    return re.sub(heading_re, add_id_attribute, html)


# Rebind the RichText's html serialization function such that
# the output is still entirely functional as far as wagtail
# can tell, except with headings enriched with fragment ids.
RichText.__html__ = with_heading_ids



# from article.models import IMAGE_FORMATTING_CHOICES

BYLINE_CHOICES = (
    ('name', 'Name'),
    ('email', 'Email'),
    ('twitter', 'Twitter'),
    ('website', 'Website'),
)

ARTICLE_STATUS = (
    ('not_reviewed', 'Not reviewed'),
    ('review_in_progress', 'In progress'),
    ('review_complete', 'Review complete'),
)

# Image formatting choices.
IMAGE_FORMATTING_CHOICES = [
    ('25_PERCENT_WIDTH', '25% width'),
    ('50_PERCENT_WIDTH', '50% width'),
    ('75_PERCENT_WIDTH', '75% width'),
    ('90_PERCENT_WIDTH', '90% width'),
    ('100_PERCENT_WIDTH', '100% width'),
]


class FiveQuestionsTagPage(TaggedItemBase):
    """
    Support for tagging individual resources.
    """
    content_object = ParentalKey(
        'FiveQuestionsPage',
        related_name='tagged_items',
        on_delete=models.CASCADE
    )


# FiveQuestionsAuthororderable needs to go in article/models.py b/c of circular imports.

class FiveQuestionsIndexPage(Page):
    """
    The main Five Questions index page model.
    Location: /five-questions
    """
    intro = RichTextField(blank=True)

    def get_context(self, request):
        """
        Modify QuerySet to return posts in reverse chronological order and only return five_questionss
        that are published.
        """
        context = super().get_context(request)
        five_questionspages = self.get_children().live().public().order_by('-first_published_at').filter(models.Q(fivequestionspage__is_suppressed=False))
        context['five_questionspages'] = five_questionspages
        return context

    content_panels = Page.content_panels + [
        FieldPanel('intro', classname='full')
    ]

    subpage_types = [
        'five_questions.FiveQuestionsPage',
    ]

    parent_page_type = [
        'wagtailcore.page',
    ]


@clean_titler
class FiveQuestionsPage(Page):
    """
    FiveQuestions page model. Formed from form input from FiveQuestionsSubmitPage and FiveQuestionsSubmitForm.
    Location: /five-questions/<five_questions-slug>
    """

    lead_image = models.ForeignKey(
        'wagtailimages.Image',
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='+'
    )
    # lead_image_text = models.CharField(max_length=255, blank=True, null=True)
    lead_image_caption = models.CharField(max_length=255, blank=True, null=True)
    lead_image_alt_text = models.TextField(
        blank=True, null=True,
        help_text='Specify the alt text to improve site accessibility. This should be '
        ' descriptive of the image and not merely a recitation of the caption'
        ' text. Nor should it be duplicative of information in the caption.'
        ' But it should be pithy. Perhaps no more than 125 characters.'
        ' See best practices at https://axesslab.com/alt-texts/.'
    )
    lead_image_formatting_options = models.CharField(
        choices=IMAGE_FORMATTING_CHOICES,
        default='100_PERCENT_WIDTH',
        max_length=255,
        help_text='Select the formatting rules that apply this image. By default, images'
        ' will span 100% of the width of the text column. Selecting 50% would'
        ' render the image so that the width occupied 50% of the text column.'
        ' Aspect ratios will be preserved. For a somewhat technical explanation'
        ' of how images work in Wagtail, see https://docs.wagtail.io/en/v2.12.3/topics/images.html'
    )
    body = StreamField([
        ('heading', blocks.CharBlock(classname="full title")),
        ('paragraph', blocks.RichTextBlock(features=['redact', 'h1', 'h2',
                                                     'h3', 'h4',
                                                     'h5', 'h6', 'bold',
                                                     'italic', 'ol', 'ul',
                                                     'hr', 'embed', 'link',
                                                     'document-link', 'image',
                                                    'code', 'superscript',
                                                     'subscript',
                                                     'strikethrough',
                                                     'blockquote'])),
        ('quote', blocks.BlockQuoteBlock()),
        ('image_with_alt_text', blocks.StructBlock([
            ('image', ImageChooserBlock()),
            ('caption_text', blocks.RichTextBlock(required=False)),
            ('alt_text', blocks.TextBlock(
                help_text='Specify the alt text to improve site accessibility. This should be '
                ' descriptive of the image and not merely a recitation of the caption'
                ' text. Nor should it be duplicative of information in the caption.'
                ' But it should be pithy. Perhaps no more than 125 characters.'
                ' See best practices at https://axesslab.com/alt-texts/.'
            )),
            ('formatting_options', blocks.ChoiceBlock(
                required=False,
                choices=IMAGE_FORMATTING_CHOICES,
                help_text='Select the formatting rules that apply this image. By default, images'
                ' will span 100% of the width of the text column. Selecting 50% would'
                ' render the image so that the width occupied 50% of the text column.'
                ' Aspect ratios will be preserved. For a somewhat technical explanation'
                ' of how images work in Wagtail, see https://docs.wagtail.io/en/v2.12.3/topics/images.html'
            ))],
            icon='image', )
        ),
        ('embeded_item', blocks.RawHTMLBlock()),
    ])
    # Not displayed on the submission form.
    tags = ClusterTaggableManager(through=FiveQuestionsTagPage, blank=True)
    status = models.CharField(max_length=255, default='not_reviewed', choices=ARTICLE_STATUS)
    date = models.DateField('Post date', null=True, blank=True)
    intro = RichTextField(blank=True)
    submitted_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    # https://stackoverflow.com/questions/40554215/wagtail-filter-results-of-an-inlinepanel-foreignkey
    associated_English_five_questions = models.ForeignKey('self', on_delete=models.SET_NULL,
                                                          null=True, blank=True,
                                                          related_name='translations',
                                                          help_text = 'If this Five Questions is not in English, and there exists an '
                                                          'English translation of the Five Questions , select it here. '
                                                          'This will enable automatic linking of the various '
                                                          'translations.',
                                                         )
    language = models.CharField(
        help_text="Specify the language in which the Five Questions is written. Note: the language must start with a"
        " capital letter.",
        max_length=255
    )
    # Toggle FlipBook support for the Five Questions
    is_flipbook = models.BooleanField(default=False)
    # Toggle support for suppressing an article from the index page
    is_suppressed = models.BooleanField(default=False)

    def __str__(self):
        return self.title

    search_fields = Page.search_fields + [
        index.SearchField('body'),
    ]

    content_panels = Page.content_panels + [
        MultiFieldPanel([
            InlinePanel("authors", label="Author", min_num=0, max_num=10)
            # FieldPanel('name'),
            # FieldPanel('email'),
            # FieldPanel('twitter'),
            # FieldPanel('website'),
        ], heading='Author(s)'),
        MultiFieldPanel([
            FieldPanel('lead_image'),
            FieldPanel('lead_image_caption'),
            FieldPanel('lead_image_alt_text'),
            FieldPanel('lead_image_formatting_options'),
        ], heading='Lead'),
        FieldPanel('tags'),
        FieldPanel('is_flipbook'),
        FieldPanel('is_suppressed'),
        FieldPanel('body'),
        MultiFieldPanel([
            FieldPanel('date'),
            FieldPanel('status'),
            FieldPanel('language'),
            PageChooserPanel('associated_English_five_questions', 'five_questions.FiveQuestionsPage')
        ], heading='Editorial information'),
    ]

