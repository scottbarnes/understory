# name: Understory CI

on:
  push:
    branches: [ testing ]
  pull_request:
    branches: [ testing ]

env:
  # IMAGE: public.ecr.aws/i4c2l4g3/understory
  AWS_REGION: us-east-1
  DJANGO_IMAGE: django
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
  DJANGO_SLACK_CHANNEL: ${{ secrets.DJANGO_SLACK_CHANNEL }}
  DJANGO_SLACK_TOKEN: ${{ secrets.DJANGO_SLACK_TOKEN }}
  DJANGO_VERSION: django_latest
  IMAGE_TAG: ${{ github.sha }}
  POSTGRESQL_IMAGE: postgresql
  POSTGRES_DB: testing
  POSTGRES_HOST: postgres
  # POSTGRES_HOST: localhost
  POSTGRES_PASSWORD: testing
  POSTGRES_PORT: 5432
  POSTGRES_USER: testing
  TEST_ENV: true

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v3


      - name: Login to Public ECR
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup environment
        run: |
          mkdir -p .envs/.production
          bash ./setup_env.sh

      - name: Build docker images
        # env:
        #   IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -f ./compose/production/django/Dockerfile -t understory_production_django .
          docker tag understory_production_django:latest public.ecr.aws/i4c2l4g3/understory:$IMAGE_TAG
          docker tag understory_production_django:latest public.ecr.aws/i4c2l4g3/understory:django_latest

      - name: Run tests
        run: |
          docker images
          docker-compose -f production.yml run django python manage.py test

      - name: Push docker images to ECR
        run: |
          echo "Pushing image to ECR..."
          # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push --all-tags public.ecr.aws/i4c2l4g3/understory
          # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          # echo "::set-output name=image::public.ecr.aws/i4c2l4g3/understory:$IMAGE_TAG"

      - name: Add key to ssh-agent.
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run : |
          mkdir -p ~/.ssh/
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan 54.219.122.144 >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Deploy to AWS
        run: |
          scp -o StrictHostKeyChecking=no -r ./.env ./.envs production.yml ubuntu@${{ secrets.AWS_IP_ADDRESS }}
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_IP_ADDRESS }} << 'ENDSSH'
            cd /understory
            source .env
            # docker login ghcr.io -u $NAMESPACE -p $PERSONAL_ACCESS_TOKEN
            # docker pull $WEB_IMAGE
            # docker pull $NGINX_IMAGE
            docker-compose -f production.yml pull
            docker-compose -f production.yml up -d
          ENDSSH


      # - name: Build, tag, and push image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: understory
      #     IMAGE_TAG: 1
      #   run: |
      #     # Build a docker container and push it to ECR 
      #     # docker build -f ./compose/production/django/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     docker build -f ./compose/production/django/Dockerfile -t public.ecr.aws/i4c2l4g3/$ECR_REPOSITORY:$IMAGE_TAG .
      #     echo "Pushing image to ECR..."
      #     # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      #     docker push public.ecr.aws/i4c2l4g3/$ECR_REPOSITORY:$IMAGE_TAG
      #     # echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      #     echo "::set-output name=image::public.ecr.aws/i4c2l4g3/$ECR_REPOSITORY:$IMAGE_TAG"
