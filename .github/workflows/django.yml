# name: Understory CI

on:
  push:
    branches: [ testing ]
  pull_request:
    branches: [ testing ]

env:
  AWS_REGION: us-east-1
  DJANGO_IMAGE: django
  DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
  DJANGO_SETTINGS_MODULE: ${{ secrets.DJANGO_SETTINGS_MODULE }}
  DJANGO_SLACK_CHANNEL: ${{ secrets.DJANGO_SLACK_CHANNEL }}
  DJANGO_SLACK_TOKEN: ${{ secrets.DJANGO_SLACK_TOKEN }}
  DJANGO_VERSION: django_latest
  IMAGE_TAG: ${{ github.sha }}
  POSTGRESQL_IMAGE: postgresql
  POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
  POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
  POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
  POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
  POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
  DJANGO_ALLOWED_HOSTS: '${{ secrets.DJANGO_ALLOWED_HOSTS }}'

jobs:
  build-and-push:

    runs-on: ubuntu-latest
    
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      # Copy environment variables from Github secrets to .env, which is excluded from the container
      # and copied via scp to AWS EC2
      - name: Setup environment
        run: |
          mkdir -p .envs/.production
          bash ./setup_env.sh

      - name: Set up Docker Buildx  # Necessary for caching.
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to AWS ECR
        uses: docker/login-action@v1 
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build and export to Docker
        uses: docker/build-push-action@v2
        with:
          context: .
          push: false
          load: true
          file: ./compose/production/django/Dockerfile
          tags: |
            public.ecr.aws/i4c2l4g3/understory:django_latest
            public.ecr.aws/i4c2l4g3/understory:${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Run Django tests inside Docker  # This requires bringing up the Postgres container.
        run: |
          docker-compose -f production.yml run django python manage.py test
            
      - name: Build and push  # Relies on cache from previous build + export step.
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          file: ./compose/production/django/Dockerfile
          tags: |
            public.ecr.aws/i4c2l4g3/understory:django_latest
            public.ecr.aws/i4c2l4g3/understory:${{ env.IMAGE_TAG }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - # Temp fix  # So cache doesn't grow forever.
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:

      - name: Checkout
        uses: actions/checkout@v3

      # Copy environment variables from Github secrets to .env, which is excluded from the container
      # and copied via scp to AWS EC2
      - name: Setup environment
        run: |
          mkdir -p .envs/.production
          bash ./setup_env.sh

      - name: Add key to ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run : |
          mkdir -p ~/.ssh/
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan ${{ secrets.AWS_IP_ADDRESS }} >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.PRIVATE_KEY }}"

      - name: Deploy to AWS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        # Copy over env files, as they're not in the publicly available images, and pull updates.
        run: |
          scp -o StrictHostKeyChecking=no -r ./.env ./.envs compose/ production.yml ubuntu@${{ secrets.AWS_IP_ADDRESS }}:./understory
          ssh -o StrictHostKeyChecking=no ubuntu@${{ secrets.AWS_IP_ADDRESS }} << 'ENDSSH'
            cd ./understory
            source .env
            docker-compose -f production.yml pull
            docker-compose -f production.yml up -d
          ENDSSH

  slack:
    name: Slack
    needs: [build-and-push, deploy] # set needs only last job except this job
    runs-on: ubuntu-latest
    if: always() # set always
    steps:
        # run this action to get workflow conclusion
        # You can get conclusion via env (env.WORKFLOW_CONCLUSION)
      - uses: technote-space/workflow-conclusion-action@v2
      - uses: 8398a7/action-slack@v3
        with:
          status: ${{ env.WORKFLOW_CONCLUSION }} # neutral, success, skipped, cancelled, timed_out, action_required, failure
          # status: failure
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: env.WORKFLOW_CONCLUSION == 'failure' # notify only if failure
